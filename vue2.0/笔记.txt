1.0到2.0后的变化:
1.在每个组件模板，不在支持片段代码
	组件中模板:
		之前:
			<template>
				<h3>这是组件</h3><strong>我是加粗标签</strong>
			</template>
		现在:
			<template>
				<div>
					<h3>这是组件</h3><strong>我是加粗标签</strong>
				</div>
			</template>
		总结:
			必须有根元素，包裹住所有的代码
	查看2.html
2.关于组件定义
	1.0
	Vue.extend 这种方式，在2.0里面有，但是有一些改动，这种写法即使能用，也不要用。
	
	Vue.component(组件名称,{  //在2.0里可以继续使用
		template:'<h3>这是组件</h3><strong>我是加粗标签</strong>'
	});
	
	2.0推出一个组件，简洁定义方式
	let Home = {
		template:'#aaa'
	};   ->取代了Vue.extend
	Vue.component('Home',Home);
	查看3.html
3.生命周期
	之前：
		init
		created
		beforeCompile
		compiled
		ready       -> mounted
		beforeDestroy
		destroyed
	现在:
		beforeCreate  组件实例刚刚被创建，属性都没有
		created 	     实例已经创建完成，属性已经绑定
		beforeMount   模板编译之前
		mounted       模板编译完成,代替ready和compiled
		beforeDestroy 组件销毁前
		destroyed	     组件销毁后
		
		新增:
		beforeUpdate  组件更新之前
		updated       组件更新完成
	查看4.html
4.循环
	2.0里面默认就可以添加重复的数据
	
	arr.forEarch(function(item,index){
	});
	
	去掉了隐式变量
		$index $key
	之前:
		v-for="(index,val) in arr"
	现在:
		v-for="(val,index) in arr" //数组对象循环
		v-for="(val,key) in obj"  //object对象循环
	之前:track-by="id"(提升性能)
	现在:
		<li v-for="(val,index) in list" :key="index">
	查看5.html
5.自定义键盘指令
	之前:
		Vue.directive('on').keyCodes.ctrl=112;
	现在:
		Vue.config.keyCodes.enter =13;
	查看6.html
6.过滤器
	之前:
		系统就自带很多过滤器
	现在:
		到了2.0,内置过滤器，全部删除了
		lodash   工具库  
		自定义过滤器——还有
				但是，自定义过滤器传参改变了
				之前:{{msg | toDou '12' '5'}}
				现在:{{msg | toDou('12','5')}}
	查看7.html
7.组件通信:
	vm.$emit()
	vm.$on();
	
	父组件和子组件:
		子组件想要拿到父组件的数据:
			通过props
		之前:
			子组件可以更改父组件信息，可以是同步 sync
		现在:
			不允许直接给父级的数据，做赋值 
			查看8-1.html
		问题: 如果必须要改
			1.父组件每次传一个对象给子组件，利用原生js里对象之间的引用关系 
				修改子组件数据，父组件数据也会被同步
				查看8-2.html
			2.在子组件内通过mounted，中转父组件的数据到子组件数据中
				修改子组件数据，父组件数据不会被同步
				查看8-3.html
			
	单一事件中心管理组件通信:
		同级组件之间相互获取数据，创建一个空的vue对象，然后用$emit将数据存到组件里，然后用$on去获取
		var Event=new Vue();
		
		Event.$emit(事件名称,数据);
		
		Event.$on(时间名称,function(数据){
              
        }.bind(this));//用bind改变函数内部的this的指定
		查看8-4.html
--------------------------------------------
debouce    放弃
		->loadsh
			_.defounce(fn,时间)
--------------------------------------------
8.transition
	之前:
		属性
		<p transition="fade"></p>
		
		.fade-transition {}
		.fade-enter {}
		.fade-leave {}
	现在:
		到2.0以后的transition组件
		<transition name="fade"
			/*回掉函数*/
			@before-enter="beforeEnter"
    		@enter="enter"
    		@after-enter="afterEnter"
    		@before-leave="beforeLeave"
    		@leave="Leave"
    		@after-leave="afterLeave"
		>
			运动东西（元素、属性、路由）
		</transition>
	
		.fade-enter {}    //初始状态
		.fade-enter-active {}  //变成什么样->当元素出来(显示)
		.fade-leave {}    
		.fade-leave-active {} //变成什么样->当元素离开(消失)
	查看9-1.html
	如何animate.css配合用？
		<transition enter-active-class="animated zoomlnLeft" leave-active-class="animated zoomOutRight">
    		<p v-show="show"></p>
    	</transition>
    多个元素运动:
    	<transition-group enter-active-class="" leave-active-class="">
            <p :key="1"></p>
            <p :key="2"></p>
        </transition-group>
	查看9-2.html
---------------------------------------------
vue2.0路由:
http://router.vuejs.org/zh-cn/index.html
基本使用:
1.布局
	<router-link to="/home">主页</router-link>  //路由链接
	<router-view></router-view>  //路由展示
2.路由写法
	//组件
    let Home = {
    	template:'<h3>我是主页</h3>'
    };
    let News = {
    	template:'<h3>我是新闻</h3>'
    };
    //配置路由
    const routes = [
    	{path:'/home',component:Home},
    	{path:'/news',component:News},
    ];
    //生成路由实例
    let router = new VueRouter({
		routes
	});
	//挂载到vue实例上
	new Vue({
		el:'#box',
		data:{
			msg:'welcome vue2.0'
		},
		router
	})
3.重定向
	之前 router.rediect  废弃了
	现在:
	{path:'*',redirect:'/home'}
4.路由嵌套
	/user/username
	const routes = [
	    	{path:'/home',component:Home},
	    	{
	    		path:'/user',
	    		component:User,
	    		children:[  //核心
	    			{
	    				path:'username',
	    				component:UserDetail
	    			}
	    		]
	    	},
	    	{path:'*',redirect:'/home'}  //404
	    ];
5.路由参数
	let UserDetail = {
    	template:'<p>{{$route.params}}</p>'
    };
	//配置路由
    const routes = [
    	{path:'/home',component:Home},
    	{
    		path:'/user',
    		component:User,
    		children:[
    			{
    				path:':username/age/:age',
    				component:UserDetail
    			}
    		]
    	},
    	{path:'*',redirect:'/home'}  //404
    ];
6.路由实例方法
	router.push({'path':'home'});//直接添加一个路由，表现切换路由，本质往历史记录里面添加一个
	router.replace({path:'news'}) //替换路由，替换当前路由，并且不会往历史记录里添加
--------------------------------------------
vue-cli
--------------------------------------------
脚手架: vue-loader
	1.0 ->
	new Vue({
	  el: '#app',
	  component:App
	})
	2.0
	new Vue({
	  el: '#app',
	  render: h => h(App)
	})
--------------------------------------------
vue2.0
	vue-loader和vue-router的配合
--------------------------------------------
style-loader css-loader

	style!css
--------------------------------------------
ui组件
	饿了么团队开源一个基于vue的组件库
		elementUI    pc端
		MintUI       移动端
	----------------------------------------
	elementUI:
		如何使用
		官网:http://element.eleme.io
		1.安装:elementUI
			npm i element-ui -D
		i       -> install
		D       -> --save-dev
		S(大写)  ->  --save
		2.引入main.js   入口文件
		import ElementUI from 'element-ui'
		import 'element-ui/lib/theme-default/index.css'
		3.使用组件
		Vue.use(ElementUI)
		css-loader   引入css
		字体图标                    file-loader    //css文件里引入字体图标需要在webpack里使用file-loader
	mint-ui
		官网:http://mint-ui.github.io
		
---------------------------------------------
使用组件:
	Vue.use(Vuesource)
自定义全局组件:
	1.创建loading文件夹;
	2.在loading文件夹下创建index.js文件;
	3.导出模块，模块必须要有install方法
	const _loading = {
		install:function(Vue){
			Vue.component('Loading',Loading);
		}
	};
	4.引入组件
		import routerConfig from './components/loading/index.js'
		默认可以不写index.js，导入组件的时候会自动引用
--------------------------------------------
vuex:集中式管理数据
	http://vuex.vuejs.org/
	
	vuex提供两个非常靠谱的方法
		mapActions    管理所以事件
		mapGetters    获取数据
	
	cnpm install vuex -D
